---
# Datastore stack used to house (live and historical) information synchronized from the Salesforce API
# This stack contains the Aurora serverless setup which can be queried through individually or via
# Athena if desired.
AWSTemplateFormatVersion: "2010-09-09"
Description: "Salesforce Datastore Stack (PiD:'921792788236')"
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "** REQUIRED FIELDS **"
        Parameters:
          - ParentVPCStack
          - ParentBucketStack
          - InstallationId
      - Label:
          default: "RDS Parameters"
        Parameters:
          - EngineVersion
          - DBSnapshotIdentifier
          - DBName
          - DBBackupRetentionPeriod
          - DBMasterUsername
          - PreferredBackupWindow
          - PreferredMaintenanceWindow
          - EnableDataApi
          - SecretRotationAssetZip
Parameters:
  ParentVPCStack:
    Description: "Stack name of parent VPC stack."
    Type: String
    AllowedPattern: ".{3,}"
  ParentBucketStack:
    Description: "The name of the bucket stack."
    Type: String
    AllowedPattern: ".{3,}"
  InstallationId:
    Description: "The unique name for this system such that it will not conflict globally with any other installation of this system. Must only contain alphanumeric characters (no special punctuation such as _ , _ . & ! + = etc.)"
    Type: String
    AllowedPattern: "[a-z0-9]{8,}"
  SecretRotationAssetZip:
    Description: "The source code for the Step Function Lambda zip file."
    Type: String
    Default: "assets/SecretsManagerRDSPostgreSQLRotationSingleUser.zip"
  DBSnapshotIdentifier:
    Description: "Optional identifier for the DB snapshot from which you want to restore (leave blank to create an empty database)."
    Type: String
    Default: ""
  DBName:
    Description: "Name of the database (ignored when DBSnapshotIdentifier is set, value used from snapshot)."
    Type: String
    Default: db
  DBBackupRetentionPeriod:
    Description: "The number of days to keep snapshots of the database."
    Type: Number
    MinValue: 1
    MaxValue: 35
    Default: 7
  DBMasterUsername:
    Description: "The master user name for the DB instance (ignored when DBSnapshotIdentifier is set, value used from snapshot)."
    Type: "String"
    Default: sfadmin
  PreferredBackupWindow:
    Description: "The daily time range in UTC during which you want to create automated backups."
    Type: String
    Default: "09:54-10:24"
  PreferredMaintenanceWindow:
    Description: "The weekly time range (in UTC) during which system maintenance can occur."
    Type: String
    Default: "sat:07:00-sat:07:30"
  EnableDataApi:
    Description: "Enable the Data API (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html)."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
  EngineVersion:
    Description: "PostgreSQL version."
    Type: String
    Default: "13.7"
    AllowedValues: ["13.7"]
  SSHAccessPrefixList:
    Description: Enables SSH access to the VPC by a prefix list. Must have an instance running in order to connect. Must have set "SSHAccess" to true in the VPC stack.
    Type: String
    Default: ""
Conditions:
  HasDBSnapshotIdentifier: !Not [!Equals [!Ref DBSnapshotIdentifier, ""]]
  HasSSHPrefixList: !Not [!Equals [!Ref SSHAccessPrefixList, ""]]
Resources:
  SecretKey:
    Type: "AWS::KMS::Key"
    DeletionPolicy: Delete
    Properties:
      Enabled: true
      EnableKeyRotation: true
      Description: "Key used for encrypting RDS Secret credentials"
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-rds
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":root"
            Action: "kms:*"
            Resource: "*"
  SecretKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Join
        - "-"
        - - "alias/"
          - "sf"
          - "dbadmin-secret"
          - !Ref InstallationId
      TargetKeyId: !Ref SecretKey
  Secret:
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: Delete
    Properties:
      KmsKeyId: !Ref SecretKey
      Name: !Join
        - "-"
        - - "sf"
          - "dbadmin"
          - !Ref InstallationId
      GenerateSecretString:
        SecretStringTemplate:
          !Join ["", ['{"username": "', !Ref DBMasterUsername, '"}']]
        GenerateStringKey: password
        PasswordLength: 32 # Same as default
        RequireEachIncludedType: true
        ExcludeCharacters: " %+:;{}/\\@\"'"
  SecretRotation:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretRotationLambda
    Properties:
      RotateImmediatelyOnUpdate: false
      RotationLambdaARN: !GetAtt SecretRotationLambda.Arn
      RotationRules:
        AutomaticallyAfterDays: 30
      SecretId: !Ref Secret
  SecretRotationPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt SecretRotationLambda.Arn
      Principal: secretsmanager.amazonaws.com
  SecretRotationLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        # To update this code to the latest, go to the secrets manager console and enable rotation on RDS credentials (may need to disable it)
        # and allow it to create a new lambda function for you. This will create two new stacks and in one of them you will see a CodeUri with
        # an S3 path containing the source code.
        S3Bucket:
          Fn::ImportValue: !Sub "${ParentBucketStack}-AssetsBucket"
        S3Key: !Ref SecretRotationAssetZip
      Description: Rotates a Secrets Manager secret for Amazon RDS PostgreSQL credentials using the single user rotation strategy.
      FunctionName: !Join
        - "_"
        - - "sf"
          - "db"
          - "rotate"
          - "creds"
          - !Ref InstallationId
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt SecretRotationLambdaRole.Arn
      Runtime: python3.7
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Split
          - ","
          - Fn::ImportValue: !Sub "${ParentVPCStack}-Subnets"
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub "https://secretsmanager.${AWS::Region}.${AWS::URLSuffix}"
          EXCLUDE_CHARACTERS: ":/@\"'\\"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W92
            reason: ReservedConcurrentExecutions cannot be used because maximum invocations cannot be determined
          - id: W58
            reason: Permissions to write logs is in managed policy
  SecretRotationLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub "${ParentVPCStack}-LambdaManagedPolicy"
        - Fn::ImportValue: !Sub "${ParentVPCStack}-VPCLambdaManagedPolicy"
      Policies:
        - PolicyName: "AccessSecretsManager"
          PolicyDocument:
            Statement:
              - Sid: "SecretManagerAccess"
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                Effect: "Allow"
                Resource: !Sub
                  - "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretNamePrefix}*"
                  - SecretNamePrefix: !Ref Secret
              - Sid: "KMS"
                Action:
                  - "kms:Encrypt"
                  - "kms:Decrypt"
                  - "kms:GenerateDataKey"
                Effect: "Allow"
                Resource:
                  - !Sub
                    - "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KeyName}"
                    - KeyName: !Ref SecretKey
  SecretTargetAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      TargetId: !Ref DBInstance
      SecretId: !Ref Secret
      TargetType: "AWS::RDS::DBInstance"
  DBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join
        - "-"
        - - "sf"
          - "db"
          - !Ref InstallationId
      VpcId:
        Fn::ImportValue: !Sub "${ParentVPCStack}-VPC"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: Outbound connections are unrestricted
          - id: W29
            reason: Outbound connections are unrestricted
  DBSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref DBSecurityGroup
      IpProtocol: tcp
      FromPort: !GetAtt "DBInstance.Endpoint.Port"
      ToPort: !GetAtt "DBInstance.Endpoint.Port"
      SourceSecurityGroupId: !Ref DBSecurityGroup
      Description: !Join
        - "-"
        - - "sf"
          - "db"
          - !Ref InstallationId
  DBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref DBSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0
      Description: !Join
        - "-"
        - - "sf"
          - "db"
          - !Ref InstallationId
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Join
        - "-"
        - - "sf"
          - "db"
          - !Ref InstallationId
      SubnetIds: !Split
        - ","
        - Fn::ImportValue: !Sub "${ParentVPCStack}-Subnets"
  DBInstanceKey:
    Type: "AWS::KMS::Key"
    DeletionPolicy: Delete
    Properties:
      Enabled: true
      EnableKeyRotation: true
      Description: "Key used for encrypting RDS data"
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-rds
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":root"
            Action: "kms:*"
            Resource: "*"
  DBInstanceKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Join
        - ""
        - - "alias/"
          - !Join
            - "-"
            - - "sf"
              - "db"
              - !Ref InstallationId
      TargetKeyId: !Ref DBInstanceKey
  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot # default
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: Postgres
      MasterUsername: !If
        - HasDBSnapshotIdentifier
        - !Ref "AWS::NoValue"
        - !Ref DBMasterUsername
      MasterUserPassword: !If
        - HasDBSnapshotIdentifier
        - !Ref "AWS::NoValue"
        - !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref Secret
            - ":SecretString:password}}"
      BackupRetentionPeriod: !Ref DBBackupRetentionPeriod
      DBName: !If
        - HasDBSnapshotIdentifier
        - !Ref "AWS::NoValue"
        - !Join
          - ""
          - - "sf"
            - !Ref DBName
            - !Ref InstallationId
      EnableCloudwatchLogsExports: [postgresql, upgrade]
      EnablePerformanceInsights: false
      EngineVersion: "13.7"
      DBInstanceClass: db.m6g.large
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      StorageType: gp2
      AllocatedStorage: "100"
      MaxAllocatedStorage: "64000"
      StorageEncrypted: true
      PubliclyAccessible: true
  LambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${AWS::StackName} Lambda for connecting to RDS security group"
      VpcId:
        Fn::ImportValue: !Sub "${ParentVPCStack}-VPC"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: Outbound connections are unrestricted
          - id: W29
            reason: Outbound connections are unrestricted
  LambdaSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Condition: HasSSHPrefixList
    Properties:
      FromPort: 22
      ToPort: 22
      IpProtocol: tcp
      Description: "Allows for SSH (port 22) access from the given prefix list"
      SourcePrefixListId: !Ref SSHAccessPrefixList
      GroupId: !Ref LambdaSecurityGroup
  LambdaSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0
      Description: !Join
        - "-"
        - - "sf"
          - "lambda"
          - !Ref InstallationId
  DBSecurityGroupIngressForLambda:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: !Sub "${AWS::StackName} Allows Lambdas to access the DB"
      GroupId: !Ref DBSecurityGroup
      IpProtocol: tcp
      FromPort: !GetAtt "DBInstance.Endpoint.Port"
      ToPort: !GetAtt "DBInstance.Endpoint.Port"
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
  TableauCloudPrefixList:
    Type: AWS::EC2::PrefixList
    Properties:
      PrefixListName: "online.tableau.com"
      AddressFamily: "IPv4"
      MaxEntries: 20
      Entries:
        - Cidr: "34.208.207.197/32"
          Description: "10ax.online.tableau.com"
        - Cidr: "52.39.159.250/32"
          Description: "10ax.online.tableau.com"
        - Cidr: "34.218.129.202/32"
          Description: "10ay.online.tableau.com"
        - Cidr: "52.40.235.24/32"
          Description: "10ay.online.tableau.com"
        - Cidr: "34.218.83.207/32"
          Description: "10az.online.tableau.com"
        - Cidr: "52.37.252.60/32"
          Description: "10az.online.tableau.com"
        - Cidr: "34.214.85.34/32"
          Description: "us-west-2b.online.tableau.com"
        - Cidr: "34.214.85.244/32"
          Description: "us-west-2b.online.tableau.com"
        - Cidr: "50.17.26.34/32"
          Description: "us-east-1.online.tableau.com"
        - Cidr: "52.206.162.101/32"
          Description: "us-east-1.online.tableau.com"
        - Cidr: "3.219.176.16/28"
          Description: "prod-useast-a.online.tableau.com,prod-useast-b.online.tableau.com"
        - Cidr: "34.246.74.86/32"
          Description: "dub01.online.tableau.com"
        - Cidr: "52.215.158.213/32"
          Description: "dub01.online.tableau.com"
        - Cidr: "34.246.62.141/32"
          Description: "eu-west-1a.online.tableau.com"
        - Cidr: "34.246.62.203/32"
          Description: "eu-west-1a.online.tableau.com"
        - Cidr: "18.176.203.96/28"
          Description: "prod-apnortheast-a.online.tableau.com"
        - Cidr: "3.25.37.32/28"
          Description: "prod-apsoutheast-a.online.tableau.com"
        - Cidr: "18.134.84.240/28"
          Description: "prod-uk-a.online.tableau.com"
        - Cidr: "3.98.24.208/28"
          Description: "prod-ca-a.online.tableau.com"
      Tags:
        - Key: "Name"
          Value: "Tableau Online"
  DBSecurityGroupIngressForTableauCloud:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: !Sub "${AWS::StackName} Allows Tableau Cloud to access the DB"
      GroupId: !Ref DBSecurityGroup
      IpProtocol: tcp
      FromPort: !GetAtt "DBInstance.Endpoint.Port"
      ToPort: !GetAtt "DBInstance.Endpoint.Port"
      SourcePrefixListId: !Ref TableauCloudPrefixList
Outputs:
  StackName:
    Description: "Stack name."
    Value: !Sub "${AWS::StackName}"
  DbName:
    Description: "The name of the database"
    Value: !Join
      - ""
      - - "sf"
        - !Ref DBName
        - !Ref InstallationId
    Export:
      Name: !Sub "${AWS::StackName}-DbName"
  DBAddress:
    Description: "The connection endpoint of the DB."
    Value: !GetAtt "DBInstance.Endpoint.Address"
    Export:
      Name: !Sub "${AWS::StackName}-DBAddress"
  DBPort:
    Description: "The connection endpoint port for the DB."
    Value: !GetAtt "DBInstance.Endpoint.Port"
    Export:
      Name: !Sub "${AWS::StackName}-DBPort"
  DBSecurityGroup:
    Description: "The security group used to manage access to RDS Aurora Serverless Postgres."
    Value: !Ref DBSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-DBSecurityGroup"
  Secret:
    Description: "The name of the SecretsManager secret for accessing the database"
    Value: !Join
      - "-"
      - - "sf"
        - "dbadmin"
        - !Ref InstallationId
    Export:
      Name: !Sub "${AWS::StackName}-Secret"
  SecretArn:
    Description: "The ARN of the SecretsManager secret for accessing the database"
    Value: !Ref Secret
    Export:
      Name: !Sub "${AWS::StackName}-SecretArn"
  SecretKey:
    Description: "The key of the SecretsManager secret for accessing the database"
    Value: !Ref SecretKey
    Export:
      Name: !Sub "${AWS::StackName}-SecretKey"
  LambdaSecurityGroup:
    Description: "Security group for lambdas that connect to RDS"
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-LambdaSecurityGroup"
  DBMasterUsername:
    Description: The user name for the admin of the database
    Value: !Ref DBMasterUsername
    Export:
      Name: !Sub "${AWS::StackName}-DBMasterUsername"
