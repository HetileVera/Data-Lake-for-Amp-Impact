import { cleanup, screen } from "@testing-library/react";
import { create } from "react-test-renderer";

import { render, RenderWithChakra } from "test-utils";

import { SFObject } from "models/helpers/SFObject";

import { ObjectRow } from "components/objects-table/ObjectRow";
import { AppStore } from "models/AppStore";
import { initializeStore } from "AppContext";

// import * as metadataStoreHooks from "models/MetadataStore";

describe("ObjectRow component", () => {
  beforeEach(() => {
    const appStore = AppStore.create({});
    const installation = appStore.newInstallation();
    appStore.setInstallation(installation);

    initializeStore();

    // jest.spyOn(metadataStoreHooks, "useMetadataStore").mockImplementation(() => ({
    //   isError: false,
    //   isReady: false,
    //   store: installation.metadataStore,
    // }));
    // jest.spyOn(installationHooks, "useInstallation").mockImplementation(() => {
    //   return installation;
    // });
  });

  afterEach(cleanup);

  test("snapshot", () => {
    const sfModel = SFObject.create({
      name: "TestField",
      label: "Test Field",
      fields: {},
      fieldsLoaded: false,
      selected: false,
      stale: false,
    });

    const tree = create(
      <RenderWithChakra>
        <ObjectRow object={sfModel} isProcessing={true} setProcessing={() => jest.fn()} />
      </RenderWithChakra>
    ).toJSON();

    expect(tree).toMatchSnapshot();
  });
});
